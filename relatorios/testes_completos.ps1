# Script PowerShell para Execu√ß√£o Completa de Testes do Simulador de Mem√≥ria Virtual
# Executa diversos cen√°rios de teste e compila/limpa automaticamente

Write-Host "============================================" -ForegroundColor Yellow
Write-Host "   SIMULADOR DE MEM√ìRIA VIRTUAL - TESTES" -ForegroundColor Yellow
Write-Host "   Algoritmos: FIFO, OPT, LRU" -ForegroundColor Yellow
Write-Host "============================================" -ForegroundColor Yellow
Write-Host ""

# Fun√ß√£o para executar um teste
function Executar-Teste {
    param(
        [string]$nomeTest,
        [string]$arquivoEntrada,
        [string]$descricao
    )
    
    Write-Host "üìã $nomeTest" -ForegroundColor Cyan
    Write-Host "   $descricao" -ForegroundColor Gray
    Write-Host ""
    
    if (Test-Path $arquivoEntrada) {
        try {
            # Compila e executa
            $process = Start-Process -FilePath "gcc" -ArgumentList "-Wall -Wextra -std=c99 main.c -o temp_test" -NoNewWindow -Wait -PassThru
            if ($process.ExitCode -eq 0) {
                Get-Content $arquivoEntrada | & ".\temp_test.exe"
                Write-Host ""
            } else {
                Write-Host "‚ùå Erro na compila√ß√£o do teste $nomeTest" -ForegroundColor Red
            }
        } catch {
            Write-Host "‚ùå Erro ao executar teste $nomeTest`: $_" -ForegroundColor Red
        } finally {
            # Limpa arquivos tempor√°rios
            if (Test-Path "temp_test.exe") { Remove-Item "temp_test.exe" -Force }
            if (Test-Path "temp_test") { Remove-Item "temp_test" -Force }
        }
    } else {
        Write-Host "‚ùå Arquivo de teste n√£o encontrado: $arquivoEntrada" -ForegroundColor Red
    }
    
    Write-Host "----------------------------------------" -ForegroundColor DarkGray
    Write-Host ""
}

# Fun√ß√£o para teste manual
function Executar-Teste-Manual {
    param(
        [string]$nomeTest,
        [string]$numFrames,
        [string]$referencias,
        [string]$descricao
    )
    
    Write-Host "üìã $nomeTest" -ForegroundColor Cyan
    Write-Host "   $descricao" -ForegroundColor Gray
    Write-Host "   Frames: $numFrames | Refer√™ncias: $referencias" -ForegroundColor Gray
    Write-Host ""
    
    try {
        # Compila
        $process = Start-Process -FilePath "gcc" -ArgumentList "-Wall -Wextra -std=c99 main.c -o temp_test" -NoNewWindow -Wait -PassThru
        if ($process.ExitCode -eq 0) {
            # Cria entrada tempor√°ria
            $entrada = "$numFrames`n$($referencias -replace ' ', "`n")`n-1"
            $entrada | & ".\temp_test.exe"
            Write-Host ""
        } else {
            Write-Host "‚ùå Erro na compila√ß√£o do teste $nomeTest" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Erro ao executar teste $nomeTest`: $_" -ForegroundColor Red
    } finally {
        # Limpa arquivos tempor√°rios
        if (Test-Path "temp_test.exe") { Remove-Item "temp_test.exe" -Force }
        if (Test-Path "temp_test") { Remove-Item "temp_test" -Force }
    }
    
    Write-Host "----------------------------------------" -ForegroundColor DarkGray
    Write-Host ""
}

# Verifica se o arquivo main.c existe
if (-not (Test-Path "main.c")) {
    Write-Host "‚ùå Arquivo main.c n√£o encontrado!" -ForegroundColor Red
    exit 1
}

Write-Host "üîß Verificando compilador gcc..." -ForegroundColor Green
try {
    $null = Get-Command gcc -ErrorAction Stop
    Write-Host "‚úÖ GCC encontrado e pronto para uso!" -ForegroundColor Green
    Write-Host ""
} catch {
    Write-Host "‚ùå GCC n√£o encontrado! Instale o MinGW ou configure o PATH." -ForegroundColor Red
    exit 1
}

# TESTES B√ÅSICOS
Write-Host "üß™ CATEGORIA 1: TESTES B√ÅSICOS" -ForegroundColor Magenta
Write-Host "================================" -ForegroundColor Magenta

Executar-Teste "TESTE B√ÅSICO" "teste_basico.txt" "Caso padr√£o com 3 frames e sequ√™ncia mista"

Executar-Teste-Manual "TESTE M√çNIMO" "1" "1 2 3 4 5" "Teste com apenas 1 frame (m√°ximo stress)"

Executar-Teste "TESTE SEM PAGE FAULTS" "teste_sem_page_faults.txt" "Refer√™ncias repetidas - 0 page faults esperados"

# TESTES DE VANTAGEM DE ALGORITMOS
Write-Host "üèÜ CATEGORIA 2: TESTES DE VANTAGEM DOS ALGORITMOS" -ForegroundColor Magenta
Write-Host "==================================================" -ForegroundColor Magenta

Executar-Teste "VANTAGEM OPT" "teste_opt.txt" "Cen√°rio onde OPT deve ter melhor performance"

Executar-Teste "VANTAGEM LRU" "teste_lru_vantagem.txt" "Cen√°rio favor√°vel ao algoritmo LRU"

# TESTES DE CASOS ESPECIAIS
Write-Host "üî¨ CATEGORIA 3: CASOS ESPECIAIS E ANOMALIAS" -ForegroundColor Magenta
Write-Host "=============================================" -ForegroundColor Magenta

Executar-Teste "ANOMALIA DE BELADY" "teste_belady_anomaly.txt" "Teste para verificar anomalia de Belady no FIFO"

Executar-Teste "TESTE C√çCLICO" "teste_ciclico.txt" "Padr√£o de acesso c√≠clico √†s p√°ginas"

# TESTES DE STRESS E PERFORMANCE
Write-Host "üí™ CATEGORIA 4: TESTES DE STRESS" -ForegroundColor Magenta
Write-Host "=================================" -ForegroundColor Magenta

Executar-Teste "TESTE DE STRESS" "teste_stress.txt" "Alto volume de refer√™ncias (40 p√°ginas)"

Executar-Teste "N√öMEROS GRANDES" "teste_grandes_numeros.txt" "Teste com n√∫meros de p√°gina elevados"

Executar-Teste "TESTE COMPLETO" "teste_completo.txt" "Cen√°rio complexo com 10 frames"

# TESTES EXTREMOS
Write-Host "üöÄ CATEGORIA 5: TESTES EXTREMOS" -ForegroundColor Magenta
Write-Host "================================" -ForegroundColor Magenta

Executar-Teste-Manual "TESTE SEQUENCIAL" "5" "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" "Acesso sequencial puro"

Executar-Teste-Manual "TESTE REVERSO" "4" "10 9 8 7 6 5 4 3 2 1" "Acesso em ordem reversa"

Executar-Teste-Manual "TESTE PING-PONG" "2" "1 2 1 2 1 2 1 2 1 2" "Altern√¢ncia entre duas p√°ginas"

# FINALIZA√á√ÉO
Write-Host "‚úÖ TODOS OS TESTES CONCLU√çDOS!" -ForegroundColor Green
Write-Host ""
Write-Host "üìä RESUMO:" -ForegroundColor Yellow
Write-Host "- Testados diferentes cen√°rios de substitui√ß√£o de p√°ginas" -ForegroundColor White
Write-Host "- Verificados os tr√™s algoritmos: FIFO, OPT e LRU" -ForegroundColor White
Write-Host "- Inclu√≠dos testes de stress e casos extremos" -ForegroundColor White
Write-Host "- Todos os arquivos tempor√°rios foram limpos automaticamente" -ForegroundColor White
Write-Host ""
Write-Host "üîß Para executar um teste individual:" -ForegroundColor Cyan
Write-Host "   gcc -Wall -Wextra -std=c99 main.c -o temp && Get-Content teste_basico.txt | .\temp.exe && Remove-Item temp.exe" -ForegroundColor Gray
Write-Host ""
Write-Host "============================================" -ForegroundColor Yellow
